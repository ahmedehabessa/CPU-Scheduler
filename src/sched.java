
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.util.*;
import static java.util.Spliterators.*;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ahmed
 */
public class sched extends javax.swing.JFrame {

    /**
     * Creates new form sched
     */
    public sched() {
        initComponents();
    }
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        Piro = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Arival = new javax.swing.JTextArea();
        Quantum = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        processname = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        Burst = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("the sceduledr assiginment");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        menu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chose Sceduling Type", "FCFC", "SJF Premptive", "SJF nonPremptive", "Prio premptive", "Piro nonPremptive", "RR" }));
        menu.setToolTipText("chose desired scheduling algorithm");
        menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        Piro.setColumns(20);
        Piro.setRows(5);
        Piro.setText("3\n1\n5\n2\n4");
        Piro.setToolTipText("enter priority of process 1 then press enter them priority of process 2 then press enter ...");
        jScrollPane3.setViewportView(Piro);

        jLabel1.setText("Arival Time");

        jLabel2.setText("Brust time");

        jLabel3.setText("Pirority ");

        jButton1.setText("Simulate");
        jButton1.setToolTipText("Press this button to start simulation");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Exit");
        jButton2.setToolTipText("Press this button to exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        Arival.setColumns(20);
        Arival.setRows(5);
        Arival.setText("0\n1\n2\n3\n4");
        Arival.setToolTipText("arival time of process 1 then press enter then arival time of process 2 ... ");
        jScrollPane1.setViewportView(Arival);

        Quantum.setToolTipText("enter desired Quantum time");
        Quantum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantumActionPerformed(evt);
            }
        });

        jLabel4.setText("Quantum");

        jLabel5.setText("Process name");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        processname.setColumns(20);
        processname.setRows(5);
        processname.setText("a\nb\nc\nd\ne");
        processname.setToolTipText("enter your process name then press enter then 2nd process name then enter ...");
        processname.setName(""); // NOI18N
        jScrollPane2.setViewportView(processname);

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        Burst.setColumns(20);
        Burst.setRows(5);
        Burst.setText("10\n1\n2\n1\n5");
        jScrollPane5.setViewportView(Burst);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addGap(8, 8, 8)))
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(63, 63, 63))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addGap(51, 51, 51)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(85, 85, 85))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addGap(65, 65, 65)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(36, 36, 36)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Quantum, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(23, 23, 23)))))))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Quantum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5))
                        .addGap(34, 34, 34)
                        .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(57, 57, 57))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int box;
       box = menu.getSelectedIndex();
      //  System.out.println(box);
        String txt=new String();
       String names=new String();
       names=processname.getText();
        txt = Burst.getText();
       FCFS f=new FCFS();         
        Vector<Integer> burst = new Vector<Integer>();
       burst = FCFS.stringtovector(txt);
        
       char[] c=new char[names.length()];
       c = names.toCharArray();
       txt = Arival.getText();
        Vector<Integer> arival = new Vector<Integer>();
        arival=FCFS.stringtovector(txt);
       /*
        txt=Piro.getText();
        Vector <Integer> prio = new Vector<Integer>();
        prio= FCFS.stringtovector(txt);
        
        txt=Quantum.getText();
        Vector <Integer> quantum = new Vector<Integer>();
        quantum= FCFS.stringtovector(txt);
        */
        Process[] pp =  new Process[burst.size()];
       // String arivaltxt1=new String();
        //arivaltxt1= Arival.getText();
      //  Vector<Integer> arivaal=new Vector<Integer>();
        //arivaal=FCFS.stringtovector(arivaltxt1);
        Vector<Process> pvectorfcfs=new Vector<Process>();
       
        
        //----------------------------------------------------------------------------
        //=============================================================================
        //==============================================================================
        if(box==1)
        {
        //***************************************************
            int count =0,j=0; String colect=new String();
            colect="";
        for (count =0; count<burst.size();count++){
            
       while(c[j]!='\n' && c[j]!=' ')
             {
                colect +=c[j];
                 j++;
                 
             if(j==names.length())
                 break;
             }
                          
            pp[count]=new Process(colect,burst.get(count),arival.get(count),0,0);
           pvectorfcfs.add(pp[count]);
            colect="";
           j++;
          
        }
       
        
        gui gui1 = new gui(names,pvectorfcfs,arival , pp, box);
        //  gui1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         gui1.setSize(500,500);
         gui1.setVisible(true);  
        //done
        }
        //************************************************************SJF NON
        else if (box == 3){
          
          
         int count =0,j=0; String colect=new String();
         colect="";
        // burst.sort(null);
        Vector<Process> pvector=new Vector<Process>();
        for (count =0; count<burst.size();count++)
        {
        while(c[j]!='\n' && c[j]!=' ')
             {
                colect +=c[j];
                 j++;
                 
             if(j==names.length())
                 break;
             }
                          
            pp[count]=new Process(colect,burst.get(count),arival.get(count),0,0);
           colect="";
           j++;
        
        }
        
         pp=pp[0].SJFNON(pp);
         for(int i=0;i<burst.size();i++)
             pvector.add(pp[i]);
        gui gui3 =new gui(names,burst,pvector , pp , box);
                gui3.setSize(500,500);
                gui3.setVisible(true);
                //done
        }
        
        //===========================================================================================
        /**************************************PRIO NONPREMPTIVE************************************/
        else if (box==5)
        {
         String priotxt=new String();
         priotxt=Piro.getText();
         Vector<Integer> piro =new Vector<Integer>();
         piro=FCFS.stringtovector(priotxt);
         int count =0,j=0; String colect=new String();
         colect="";
        // burst.sort(null);
        for (count =0; count<burst.size();count++)
        {
        while(c[j]!='\n' && c[j]!=' ')
             {
                colect +=c[j];
                 j++;
                 
             if(j==names.length())
                 break;
             }
                          
            pp[count]=new Process(colect,burst.get(count),0,piro.get(count),0);
           colect="";
           j++;        
        }
        pp=pp[0].PIRONON(pp);
        gui gui3 =new gui(names,burst,null , pp , box);
                gui3.setSize(500,500);
                gui3.setVisible(true);
        //done
        }
        /////////////////////////////////////////////////////////////////////////////////
        /******************************SJF PREEMPTIVE***********************************/
        
        else if (box==2){
            String arivaltxt=new String();
            arivaltxt=Arival.getText();
            //Vector<Integer> arival = new Vector<Integer>();
            //arival=FCFS.stringtovector(arivaltxt);
            int count =0,j=0; String colect=new String();
            colect="";
            Vector pvector = new Vector();
            for (count =0; count<burst.size();count++)
            {
              while(c[j]!='\n' && c[j]!=' ')
              {
                colect +=c[j];
                 j++;
                 
             if(j==names.length())
                 break;
             }
                          
            pp[count]=new Process(colect,burst.get(count),arival.get(count),0,0);
           pvector.add(pp[count]);
            colect="";
           j++;        
        }
            Collections.sort(pvector);
            
 //           pp[1].SJFPNONREE(pvector,arival);
            
             gui gui3 =new gui(names,pvector,burst, pp , box);
                gui3.setSize(500,500);
                gui3.setVisible(true);
                
                //Done 
        }
        //////////////////////////////////////////////////////////////////////////////////////
        /**************************PRIO PREEMPTIVE*******************************************/
        else if (box==4)//priopremptive
        {
             String arivaltxt=new String();
            arivaltxt=Arival.getText();
            String priotxt=new String();
            priotxt=Piro.getText();
        //    Vector<Integer> arival = new Vector<Integer>();
            arival=FCFS.stringtovector(arivaltxt);
            Vector<Integer> prio = new Vector<Integer>();
            prio=FCFS.stringtovector(priotxt);
            int count =0,j=0; String colect=new String();
            colect="";
            Vector pvector = new Vector();
            for (count =0; count<burst.size();count++)
            {
              while(c[j]!='\n' && c[j]!=' ')
              {
                colect +=c[j];
                 j++;
                 
             if(j==names.length())
                 break;
             }
                          
            pp[count]=new Process(colect,burst.get(count),arival.get(count),prio.get(count),0);
           pvector.add(pp[count]);
            colect="";
           j++;        
        }
            Collections.sort(pvector);
            
            
             gui gui3 =new gui(names,pvector,burst, pp , box);
                gui3.setSize(500,500);
                gui3.setVisible(true);
            
                
        }
          /////////////////////////////////////////////////////////////////////////////////
          /***************************ROUND ROBIN*****************************************/
        else if (box==6)//quntum
        {
            String s=new String();
            s=Quantum.getText();
            int quantum =Integer.parseInt(s);
           String arivaltxt=new String();
           arivaltxt=Arival.getText();
        //   Vector<Integer> arival = new Vector<Integer>();
        //     arival=FCFS.stringtovector(arivaltxt);
             int count =0,j=0; String colect=new String();
            colect="";
            Vector pvector = new Vector();
            for (count =0; count<burst.size();count++)
            {
              while(c[j]!='\n' && c[j]!=' ')
              {
                colect +=c[j];
                 j++;
                 
             if(j==names.length())
                 break;
             }
                          
           pp[count]=new Process(colect,burst.get(count),arival.get(count),0,quantum);
           pvector.add(pp[count]);
            colect="";
           j++;        
        }
            Collections.sort(pvector); //pvector sorted with arival time
            
            gui gui4 =new gui(names,pvector, burst , pp , box);
                gui4.setSize(500,500);
                gui4.setVisible(true);
             
             
        }
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuActionPerformed
        // TODO add your handling code here:
        int box;
        box=menu.getSelectedIndex();
        if(box==1){
            Arival.setVisible(true);
            Arival.setVisible(true);
            Piro.setVisible(false);
            Quantum.setVisible(false);
        }
        else if(box==3) {
            Arival.setVisible(true);
            Piro.setVisible(false);
            Quantum.setVisible(false);
                        }
        else if (box == 5){
            Arival.setVisible(false);
            Piro.setVisible(true);
            Quantum.setVisible(false);
        }
        else if (box==2){
            Arival.setVisible(true);
            Piro.setVisible(false);
            Quantum.setVisible(false);
        }
        else if (box==4){
            Arival.setVisible(true);
            Piro.setVisible(true);
            Quantum.setVisible(false);
        }
        else if(box==6){
            Arival.setVisible(true);
            Piro.setVisible(false);
            Quantum.setVisible(true);
            
        } 
    }//GEN-LAST:event_menuActionPerformed

    private void QuantumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_QuantumActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sched.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sched.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sched.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sched.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new sched().setVisible(true);
                        
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Arival;
    private javax.swing.JTextArea Burst;
    private javax.swing.JTextArea Piro;
    private javax.swing.JTextField Quantum;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JComboBox<String> menu;
    private javax.swing.JTextArea processname;
    // End of variables declaration//GEN-END:variables
}
